@page "/counter"
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<div class="d-flex flex-column gap-2 mt-5">
	<h1>Counter</h1>
	<p class="mb-0" role="status">Current count: @currentCount</p>
	<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
</div>

<div class="d-flex flex-column gap-2 mt-5">
	<div class="d-flex flex-row gap-2">
		<input type="text" @oninput="HandleInput" @onfocus="HandleFocus" @onblur="HandleBlur" />
		<p class="m-0">@(input_focus_text)</p>
	</div>

	<p>texto do input: @(string.IsNullOrWhiteSpace(input_text) ? "vazio" : input_text)</p>
</div>

<div class="@(string.IsNullOrEmpty(div_text) ? "p-0" : "p-5")" style="border: 1px solid black" @onmouseover="HandleMouseOver" @onmouseleave="HandleMouseLeave">
	<p class="m-1">@(string.IsNullOrEmpty(div_text) ? "hover me" : div_text)</p>
</div>

@code {
	private int currentCount = 0;
	private string input_text = "";
	private string div_text = "";
	private string input_focus_text = "";

	// add parameter to the counter componente
	[Parameter]
	public int IncrementAmount { get; set; } = 1;

	private void IncrementCount()
	{
		currentCount += IncrementAmount;
	}

	private void HandleInput(ChangeEventArgs args)
	{
		input_text = args.Value?.ToString() ?? "";
	}

	private void HandleMouseOver(MouseEventArgs args)
	{
		div_text = $"Mouse over at ({args.ClientX}, {args.ClientY})";
	}
	private void HandleMouseLeave(MouseEventArgs args)
	{
		div_text = "";
	}

	private void HandleFocus(FocusEventArgs args)
	{
		input_focus_text = "input focused";
	}

	private void HandleBlur(FocusEventArgs args)
	{
		input_focus_text = "";
	}
}
